# a version of hd that gives a user-defined error message when it
# fails to match
sig safe_hd : (String, [a::M]) -> a::M
fun safe_hd(msg,xs) {
  switch (xs) {
    case [] -> error ("hd:" ++ msg)
    case (x::_) -> x
  }
}

fun all(p, l) { 
   switch (l) {
     case []    -> true
     case x::xs -> p(x) && all(p, xs)
   }
}

fun and(l) { 
   switch (l) {
     case [] -> true
     case x::xs -> x && and(xs)
   }
}

fun or(l) { 
   switch (l) {
     case [] -> false
     case x::xs -> x || or(xs)
   }
}

fun any(p, l) {
   switch (l) {
     case [] -> false
     case x::xs -> p(x) || any(p, xs)
   }
}

fun odd(i)  { i `mod` 2 == 1 }
fun even(i) { i `mod` 2 == 0 }

# return element i of xs
fun select(xs, i) {
  safe_hd("select", drop(i, xs))
}

# swap all instances of x1 and x2 in xs
fun swap(xs, x1, x2) {
 for (var x <- xs) {
  if (x == x1) [x2]
  else if (x == x2) [x1]
  else [x]
 }
}

sig fold_left : ((b::M,a::M) -> b::M, b::M, [a::M]) -> b::M 
fun fold_left(p, u, l) {
  switch (l) {
    case [] -> u
    case x::xs -> fold_left(p, p(u, x), xs)
  }
}

sig fold_left1 : ((a::M,a::M) -> a::M, [a::M]) -> a::M 
fun fold_left1(p, l) {
  fold_left(p, safe_hd("fold_left1",l), tl(l))
}

fun fold_right(f, u, l) {
  switch (l) {
    case [] -> u
    case x::xs -> f(x, fold_right(f,u,xs))
  }
}

fun fold_right1(f, l) {
  fold_right(f, safe_hd("fold_right1", l), tl(l))
}

fun unzip(l) {
  switch (l) {
    case [] -> ([], [])
    case (a,b)::xs -> { 
     var (c,d) = unzip(xs);
     (a :: c, b :: d)
    }
  }
}

fun zip(l, r) {
  switch ((l, r)) {
    case ([], []) -> []
    case (lh::lt, rh::rt) -> 
        (lh, rh) :: zip (lt, rt)
    case (_, _) -> []
  }
}

fun replicate(n, item) {
  if (n == 0) []
  else item :: replicate(n-1, item)
}

fun filter(p, l) {
  for (var x <- l) where (p(x)) [x]
}


fun flip(f) {
  fun(x,y) { f(y,x) }
}

fun curry(f) {
  fun (x)(y) { f(x,y) }
}

fun uncurry(f) {
  fun (x, y) { f(x)(y) }
}

fun compose(f, g) {
  fun (x) { f(g(x)) }
}

sig id : (a::M) -> a::M
fun id(x) { x }

fun concatMap(f,l) {
  for (var x <- l) f(x)
}

fun first(p)   { p.1 }
fun second(p)  { p.2 }
fun third(p)   { p.3 }
fun fourth(p)  { p.4 }
fun fifth(p)   { p.5 }
fun sixth(p)   { p.6 }
fun seventh(p) { p.7 }
fun eighth(p)  { p.8 }
fun ninth(p)   { p.9 }
fun tenth(p)   { p.10 }

fun sum(ns) {
  fold_left((+), 0, ns)
}

fun product(ns) {
  fold_left((*), 1, ns)
}

fun map(f, l) {
  switch (l) {
    case []     -> []
    case hd::tl -> f(hd) :: map(f,tl)
  }
}

fun reverse(l) {
  fun aux(l,o) {
    switch (l) {
      case [] -> o
      case x::xs -> aux(xs, x::o)
    }
  }
  aux(l, [])
}


fun concat(list) {
  switch (list) {
    case [] -> []
    case (x::xs) -> x ++ concat(xs)
  }
}

fun join(glue,list) {
  switch (list) {
    case [] -> []
    case [x] -> x
    case (x::xs) -> x ++ glue ++ join(glue,xs)
  }
}

sig takeWhile : ((a) -> Bool, [a]) -> [a]
fun takeWhile(pred, list) {
  switch (list) {
    case [] -> []
    case (h::t) -> 
      switch (pred(h)) {
        case true -> h :: takeWhile(pred, t)
        case false -> []
      }
  }
}


sig dropWhile : ((a) -> Bool, [a]) -> [a]
fun dropWhile(pred, list) {
  switch (list) {
    case [] -> []
    case (h::t) -> 
      switch (pred(h)) {
        case true -> dropWhile(pred, t)
        case false -> list
      }
  }
}

sig ignore : (a) -> ()
fun ignore (_) { }

sig signum : (Int) -> Int
fun signum(i) {
  if (i>0) 1
  else if (i < 0) -1
  else 0
}

sig init : ([a]) -> [a]
fun init(list) {
  switch (list) {
    case [y] -> []
    case (h::t) -> h::init(t)
  }
}

fun butlast(list) { init(list) }

sig last : ([a]) -> a
fun last(list) {
  switch (list) {
    case [x] -> x
    case (h::t) -> last(t)
  }
}


# Option types
typename Maybe (a::M) = [|Nothing | Just:(a::M)|];

sig isJust : (Maybe (a::M)) -> Bool
fun isJust(x) {
  switch (x) {
    case Just (x) -> true
    case Nothing -> false
  }
}


sig search : ((a::M) -> Bool, [a::M]) -> Maybe (a::M)
fun search(p,l) {
  switch (l) {
    case [] -> Nothing
    case x::xs -> if (p(x)) Just(x)
                  else search(p,xs)
  }
}

sig find : ((a::M) -> Bool, [a::M]) -> a::M
fun find(p,l) {
  switch (l) {
    case [] -> error("Not_found")
    case x::xs -> if (p(x)) x
                  else find(p,xs)
  }
}

sig fromJust : (Maybe (a::M)) -> a::M
fun fromJust(x) {
  switch (x) {
    case Just (x) -> x
    case Nothing -> error ("fromJust failed")
  }
}

# association lists
# TBD: memassoc is an old LISP word. Perhaps a more modern name would fit better?
sig memassoc : (a,[(a,b)]) -> Bool
fun memassoc(x,l) {
  switch (l) {
    case []    -> false
    case (k,v)::xs -> k == x || memassoc(x, xs)
  }
}

sig lookup : (a,[(a,b)]) -> Maybe (b)
fun lookup(x,l) {
  switch (l) {
    case [] -> Nothing
    case (a,b)::xs -> if (a == x) Just(b)
                      else lookup(x,xs)
  }
}

sig assoc : (String,[(String,b)]) -> b
fun assoc(x,l) {
  switch (l) {
    case []    -> error("Not found " ++ x)
    case (k,v)::xs -> if (k == x) v
                      else assoc(x, xs)
  }
}

sig assocAll : (String,[(String,b)]) -> [b]
fun assocAll(x,l) {
  switch (l) {
    case []    -> []
    case (k,v)::xs -> if (k == x) 
                        (v::assocAll(x,xs))
                      else
                        assocAll(x,xs)
  }
}

sig sortBy : ((a) -> b, [a]) -> [a]
fun sortBy (f, l) {
  switch (l) {
    case [] -> []
    case x::xs -> {
      var lt = for (var y <- xs) where (f(y) < f(x))  [y];
      var ge = for (var y <- xs) where (f(y) >= f(x)) [y];
      sortBy(f, lt) ++ [x] ++ sortBy(f, ge)
    }
  }
}


# TODO :: fable chokes on these type signatures
# [freshResource] is a bit of magic that makes the subsequent actions a
# new resource.  That is, it redirects the user to a new URL for the
# continuation. If you call this immediately after doing a destructive
# action (e.g. database updates) then reloading and the back button 
# are made "safe": the visible URL does not refer to the action, but 
# only to what follows the freshResource call.
#sig freshResource : () -> ()
fun freshResource() {
  escape esc in {
    exit(redirect("?_cont=" ++ reifyK(esc)))
  }
}

# [sendSuspend] generates some XML, outputs it, and terminates. It
# passes to xmlf the continuation, which will resume at the place
# of the sendSuspend call. This continuation can be used in l:handler
# for example, to pass the form values through as the return value
# of sendSuspend.
# sig sendSuspend : (((a) -> ()) -> Xml) -> a
fun sendSuspend(xmlf) {
  escape returnf in {
    exit(xmlf(returnf))
  }
}


